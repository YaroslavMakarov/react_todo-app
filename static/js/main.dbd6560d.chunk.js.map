{"version":3,"sources":["components/TodoItem.js","components/propTypes.js","components/TodoList.js","components/Footer.js","components/TodoApp.js","App.js","index.js"],"names":["TodoItem","PropTypes","arrayOf","shape","id","number","isRequired","title","string","completed","bool","state","isEdit","length","props","todos","editTitle","activateTextInput","setState","target","value","submitChangeTitle","event","key","changeTitle","this","changeCompleted","deleteTodo","index","className","ClassNames","editing","type","checked","onChange","htmlFor","onDoubleClick","onClick","onKeyDown","React","Component","TodoList","toggleTodosStatus","toggleAllStatus","map","todo","todosArr","Footer","filterTodo","clearCompletedTodos","filter","countActive","href","selected","TodoApp","submitTodo","addedTodo","trim","toggleAllTodos","originTodos","placeholder","App","splice","changeToggleAllTodos","prev","filterTodos","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.dbd6560d.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport ClassNames from 'classnames';\nimport { todosPropTypes } from './propTypes';\n\nclass TodoItem extends React.Component {\n  state = {\n    isEdit: false,\n    length: this.props.todos.length,\n    editTitle: this.props.title,\n  };\n\n  activateTextInput = () => (\n    this.setState({\n      isEdit: true,\n    })\n  );\n\n  editTitle = ({ target }) => (\n    this.setState({\n      editTitle: target.value,\n    })\n  );\n\n  submitChangeTitle = (event, title, id) => {\n    if (event.key === 'Escape') {\n      this.setState({\n        isEdit: false,\n      });\n    } else if (event.key === 'Enter') {\n      this.props.changeTitle(title, id);\n      this.setState({\n        isEdit: false,\n      });\n    }\n  };\n\n  render() {\n    const {\n      id,\n      title,\n      completed,\n      changeCompleted,\n      deleteTodo,\n      index,\n    } = this.props;\n    const { isEdit, editTitle } = this.state;\n\n    return (\n      <>\n        <li className={ClassNames('item', {\n          completed,\n          editing: isEdit,\n        })}\n        >\n          <div className=\"view\">\n            <input\n              type=\"checkbox\"\n              className=\"toggle\"\n              id={id}\n              checked={completed}\n              onChange={() => (changeCompleted(id))}\n            />\n            <label\n              htmlFor={id}\n              onDoubleClick={this.activateTextInput}\n            >\n              {title}\n            </label>\n            <button\n              type=\"button\"\n              className=\"destroy\"\n              onClick={() => deleteTodo(index)}\n            />\n          </div>\n          <input\n            type=\"text\"\n            className=\"edit\"\n            onKeyDown={event => this.submitChangeTitle(event, editTitle, id)}\n            onChange={this.editTitle}\n            value={editTitle}\n          />\n        </li>\n      </>\n    );\n  }\n}\n\nTodoItem.propTypes = {\n  todos: todosPropTypes.isRequired,\n  title: PropTypes.string.isRequired,\n  changeTitle: PropTypes.func.isRequired,\n  id: PropTypes.number.isRequired,\n  completed: PropTypes.bool.isRequired,\n  changeCompleted: PropTypes.func.isRequired,\n  deleteTodo: PropTypes.func.isRequired,\n  index: PropTypes.number.isRequired,\n};\n\nexport default TodoItem;\n","import PropTypes from 'prop-types';\n\nexport const todosPropTypes = PropTypes.arrayOf(PropTypes.shape(\n  {\n    id: PropTypes.number.isRequired,\n    title: PropTypes.string.isRequired,\n    completed: PropTypes.bool.isRequired,\n  },\n));\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport TodoItem from './TodoItem';\nimport { todosPropTypes } from './propTypes';\n\nconst TodoList = (props) => {\n  const {\n    todos,\n    changeCompleted,\n    deleteTodo,\n    changeTitle,\n    toggleTodosStatus,\n    toggleAllStatus,\n  } = props;\n\n  return (\n    <section className=\"main\">\n      <input\n        type=\"checkbox\"\n        id=\"toggle-all\"\n        className=\"toggle-all\"\n        checked={toggleTodosStatus}\n        onChange={() => toggleAllStatus()}\n      />\n      <label htmlFor=\"toggle-all\">Mark all as complete</label>\n\n      <ul className=\"todo-list\">\n        {(todos.length === 0) || todos.map((todo, index, todosArr) => (\n          <TodoItem\n            key={todo.id}\n            title={todo.title}\n            id={todo.id}\n            completed={todo.completed}\n            index={index}\n            todos={todosArr}\n            changeCompleted={changeCompleted}\n            deleteTodo={deleteTodo}\n            changeTitle={changeTitle}\n          />\n        ))}\n      </ul>\n    </section>\n  );\n};\n\nTodoList.propTypes = {\n  toggleAllStatus: PropTypes.func.isRequired,\n  todos: todosPropTypes.isRequired,\n  changeCompleted: PropTypes.func.isRequired,\n  deleteTodo: PropTypes.func.isRequired,\n  changeTitle: PropTypes.func.isRequired,\n  toggleTodosStatus: PropTypes.bool.isRequired,\n};\n\nexport default TodoList;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ClassNames from 'classnames';\n\nconst Footer = (props) => {\n  const {\n    filterTodo,\n    clearCompletedTodos,\n    filter,\n    countActive,\n  } = props;\n\n  return (\n    <footer className=\"footer\">\n      <span className=\"todo-count\">\n        {`${countActive} items left`}\n      </span>\n\n      <ul className=\"filters\">\n        <li>\n          <a\n            href=\"#/\"\n            onClick={() => (filterTodo('All'))}\n            className={ClassNames({\n              selected: filter === 'All',\n            })}\n          >\n            All\n          </a>\n        </li>\n        <li>\n          <a\n            href=\"#/active\"\n            onClick={() => (filterTodo('Active'))}\n            className={ClassNames({\n              selected: filter === 'Active',\n            })}\n          >\n            Active\n          </a>\n        </li>\n        <li>\n          <a\n            href=\"#/completed\"\n            onClick={() => (filterTodo('Completed'))}\n            className={ClassNames({\n              selected: filter === 'Completed',\n            })}\n          >\n            Completed\n          </a>\n        </li>\n      </ul>\n\n      <button\n        type=\"button\"\n        className=\"clear-completed\"\n        onClick={() => clearCompletedTodos()}\n      >\n        Clear completed\n      </button>\n    </footer>\n  );\n};\n\nFooter.propTypes = {\n  filterTodo: PropTypes.func.isRequired,\n  clearCompletedTodos: PropTypes.func.isRequired,\n  countActive: PropTypes.number.isRequired,\n  filter: PropTypes.string.isRequired,\n};\n\nexport default Footer;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport TodoList from './TodoList';\nimport Footer from './Footer';\nimport { todosPropTypes } from './propTypes';\n\nclass TodoApp extends React.Component {\n  state = {\n    id: 0,\n    title: '',\n    completed: false,\n  };\n\n  changeTitle = event => (\n    this.setState({\n      title: event.target.value,\n    })\n  );\n\n  submitTodo = (event) => {\n    if (event.key === 'Enter') {\n      if (this.state.title.length === 0) {\n        return;\n      }\n\n      this.props.addedTodo(\n        {\n          id: this.state.id,\n          title: this.state.title.trim(),\n          completed: this.state.completed,\n        },\n      );\n\n      this.setState(state => ({\n        title: '',\n        id: state.id + 1,\n      }\n      ));\n\n      this.props.toggleAllTodos();\n    }\n  };\n\n  render() {\n    const { title } = this.state;\n    const {\n      todos,\n      changeCompleted,\n      deleteTodo,\n      changeTitle,\n      toggleAllStatus,\n      toggleAllTodos,\n      toggleTodosStatus,\n      filterTodo,\n      countActive,\n      clearCompletedTodos,\n      filter,\n      originTodos,\n    } = this.props;\n\n    return (\n      <section className=\"todoapp\">\n        <header className=\"header\">\n          <h1>todos</h1>\n\n          <input\n            value={title}\n            className=\"new-todo\"\n            placeholder=\"What needs to be done?\"\n            onChange={this.changeTitle}\n            onKeyDown={this.submitTodo}\n          />\n        </header>\n\n        {originTodos.length > 0\n        && (\n          <TodoList\n            todos={todos}\n            changeCompleted={changeCompleted}\n            deleteTodo={deleteTodo}\n            changeTitle={changeTitle}\n            toggleTodosStatus={toggleTodosStatus}\n            toggleAllTodos={toggleAllTodos}\n            toggleAllStatus={toggleAllStatus}\n          />\n        )}\n        {originTodos.length > 0\n        && (\n          <Footer\n            filterTodo={filterTodo}\n            countActive={countActive}\n            clearCompletedTodos={clearCompletedTodos}\n            filter={filter}\n          />\n        )}\n      </section>\n    );\n  }\n}\n\nTodoApp.propTypes = {\n  addedTodo: PropTypes.func.isRequired,\n  toggleAllTodos: PropTypes.func.isRequired,\n  todos: todosPropTypes.isRequired,\n  changeCompleted: PropTypes.func.isRequired,\n  deleteTodo: PropTypes.func.isRequired,\n  changeTitle: PropTypes.func.isRequired,\n  toggleAllStatus: PropTypes.func.isRequired,\n  toggleTodosStatus: PropTypes.bool.isRequired,\n  filterTodo: PropTypes.func.isRequired,\n  countActive: PropTypes.number.isRequired,\n  clearCompletedTodos: PropTypes.func.isRequired,\n  filter: PropTypes.string.isRequired,\n  originTodos: todosPropTypes.isRequired,\n};\n\nexport default TodoApp;\n","import React from 'react';\nimport TodoApp from './components/TodoApp';\n\nclass App extends React.Component {\n  state = {\n    todos: [],\n    toggleTodosStatus: false,\n    filter: 'All',\n  };\n\n  addedTodo = (todo) => {\n    this.setState(state => ({\n      todos: [...state.todos, todo],\n    }));\n  };\n\n  changeCompleted = (id) => {\n    this.setState(state => ({\n      todos: state.todos.map((todo) => {\n        if (todo.id === id) {\n          return {\n            ...todo,\n            completed: !todo.completed,\n          };\n        }\n\n        return todo;\n      }),\n      toggleTodosStatus: false,\n    }));\n  };\n\n  changeTitle = (title, id) => {\n    this.setState(state => (\n      {\n        todos: state.todos.map((todo) => {\n          if (todo.id === id) {\n            return {\n              ...todo,\n              title,\n            };\n          }\n\n          return todo;\n        }),\n        toggleTodosStatus: false,\n      }\n    ));\n  };\n\n  deleteTodo = index => (\n    this.setState((state) => {\n      state.todos.splice(index, 1);\n\n      return {\n        todos: [...state.todos],\n      };\n    })\n  );\n\n  changeToggleAllTodos = () => (\n    this.setState({\n      toggleTodosStatus: true,\n    })\n  );\n\n  toggleAllTodos = () => (\n    this.setState({\n      toggleTodosStatus: false,\n    })\n  );\n\n  toggleAllStatus = () => (\n    this.setState(prev => (\n      {\n        todos: prev.todos.map(todo => (\n          {\n            ...todo,\n            completed: !prev.toggleTodosStatus,\n          })),\n        toggleTodosStatus: !prev.toggleTodosStatus,\n      }\n    ))\n  );\n\n  filterTodo = (filter) => {\n    if (filter === 'All') {\n      this.setState({\n        filter,\n      });\n    } else if (filter === 'Completed') {\n      this.setState({\n        filter,\n      });\n    } else if (filter === 'Active') {\n      this.setState({\n        filter,\n      });\n    }\n  };\n\n  clearCompletedTodos = () => (\n    this.setState(prev => ({\n      todos: prev.todos.filter(todo => todo.completed === false),\n    }))\n  );\n\n  render() {\n    const {\n      todos,\n      filter,\n    } = this.state;\n    let { toggleTodosStatus } = this.state;\n    let filterTodos = [...todos];\n\n    const countActive = filterTodos.filter(todo => (\n      todo.completed === false)).length;\n\n    if (filter === 'All') {\n      filterTodos = [...todos];\n    }\n\n    if (filter === 'Completed') {\n      filterTodos = filterTodos.filter(todo => (todo.completed === true));\n    }\n\n    if (filter === 'Active') {\n      filterTodos = filterTodos.filter(todo => (todo.completed === false));\n    }\n\n    if (countActive === 0 && filterTodos.length > 0 && !toggleTodosStatus) {\n      toggleTodosStatus = true;\n    }\n\n    return (\n      <>\n        <TodoApp\n          todos={filterTodos}\n          toggleTodosStatus={toggleTodosStatus}\n          toggleAllTodos={this.toggleAllTodos}\n          addedTodo={this.addedTodo}\n          changeCompleted={this.changeCompleted}\n          deleteTodo={this.deleteTodo}\n          changeTitle={this.changeTitle}\n          toggleAllStatus={this.toggleAllStatus}\n          filterTodo={this.filterTodo}\n          clearCompletedTodos={this.clearCompletedTodos}\n          countActive={countActive}\n          filter={filter}\n          originTodos={todos}\n        />\n      </>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './base.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}