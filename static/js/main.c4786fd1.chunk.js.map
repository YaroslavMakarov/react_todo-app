{"version":3,"sources":["components/TodoItem.js","components/TodoList.js","components/propTypes.js","components/Footer.js","components/TodoApp.js","App.js","index.js"],"names":["TodoItem","state","isEdit","editTitle","props","title","activateTextInput","setState","target","value","submitChangeTitle","event","id","key","length","changeTitle","this","completed","changeCompleted","deleteTodo","className","ClassNames","editing","type","checked","onChange","htmlFor","onDoubleClick","onClick","onKeyDown","React","Component","TodoList","PropTypes","arrayOf","shape","number","isRequired","string","bool","todos","toggleTodosStatus","toggleAllStatus","map","todo","index","todosArr","Footer","filterTodo","clearCompletedTodos","filter","countActive","href","selected","TodoApp","submitTodo","preventDefault","addedTodo","trim","toggleAllTodos","originTodos","onSubmit","placeholder","App","prev","changeToggleAllTodos","storageState","JSON","parse","localStorage","getItem","setItem","stringify","filterTodos","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c4786fd1.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport ClassNames from 'classnames';\n\nclass TodoItem extends React.Component {\n  state = {\n    isEdit: false,\n    editTitle: this.props.title,\n  };\n\n  activateTextInput = () => (\n    this.setState({\n      isEdit: true,\n    })\n  );\n\n  editTitle = ({ target }) => (\n    this.setState({\n      editTitle: target.value,\n    })\n  );\n\n  submitChangeTitle = (event, title, id) => {\n    if (event.key === 'Escape') {\n      this.setState({\n        isEdit: false,\n      });\n    } else if (event.key === 'Enter' && title.length > 0) {\n      this.props.changeTitle(title, id);\n      this.setState({\n        isEdit: false,\n      });\n    }\n  };\n\n  render() {\n    const {\n      id,\n      title,\n      completed,\n      changeCompleted,\n      deleteTodo,\n    } = this.props;\n    const { isEdit, editTitle } = this.state;\n\n    return (\n      <li className={ClassNames('item', {\n        completed,\n        editing: isEdit,\n      })}\n      >\n        <div className=\"view\">\n          <input\n            type=\"checkbox\"\n            className=\"toggle\"\n            id={id}\n            checked={completed}\n            onChange={() => (changeCompleted(id))}\n          />\n          <label\n            htmlFor={id}\n            onDoubleClick={this.activateTextInput}\n          >\n            {title}\n          </label>\n          <button\n            type=\"button\"\n            className=\"destroy\"\n            onClick={() => deleteTodo(id)}\n          />\n        </div>\n        <input\n          type=\"text\"\n          className=\"edit\"\n          onKeyDown={event => this.submitChangeTitle(event, editTitle, id)}\n          onChange={this.editTitle}\n          value={editTitle}\n        />\n      </li>\n    );\n  }\n}\n\nTodoItem.propTypes = {\n  title: PropTypes.string.isRequired,\n  changeTitle: PropTypes.func.isRequired,\n  id: PropTypes.number.isRequired,\n  completed: PropTypes.bool.isRequired,\n  changeCompleted: PropTypes.func.isRequired,\n  deleteTodo: PropTypes.func.isRequired,\n};\n\nexport default TodoItem;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport TodoItem from './TodoItem';\nimport { todosPropTypes } from './propTypes';\n\nconst TodoList = (props) => {\n  const {\n    todos,\n    changeCompleted,\n    deleteTodo,\n    changeTitle,\n    toggleTodosStatus,\n    toggleAllStatus,\n  } = props;\n\n  return (\n    <section className=\"main\">\n      <input\n        type=\"checkbox\"\n        id=\"toggle-all\"\n        className=\"toggle-all\"\n        checked={toggleTodosStatus}\n        onChange={() => toggleAllStatus()}\n      />\n      <label htmlFor=\"toggle-all\">Mark all as complete</label>\n\n      <ul className=\"todo-list\">\n        {(todos.length === 0) || todos.map((todo, index, todosArr) => (\n          <TodoItem\n            key={todo.id}\n            title={todo.title}\n            id={todo.id}\n            completed={todo.completed}\n            index={index}\n            todos={todosArr}\n            changeCompleted={changeCompleted}\n            deleteTodo={deleteTodo}\n            changeTitle={changeTitle}\n          />\n        ))}\n      </ul>\n    </section>\n  );\n};\n\nTodoList.propTypes = {\n  toggleAllStatus: PropTypes.func.isRequired,\n  todos: todosPropTypes.isRequired,\n  changeCompleted: PropTypes.func.isRequired,\n  deleteTodo: PropTypes.func.isRequired,\n  changeTitle: PropTypes.func.isRequired,\n  toggleTodosStatus: PropTypes.bool.isRequired,\n};\n\nexport default TodoList;\n","import PropTypes from 'prop-types';\n\nexport const todosPropTypes = PropTypes.arrayOf(PropTypes.shape(\n  {\n    id: PropTypes.number.isRequired,\n    title: PropTypes.string.isRequired,\n    completed: PropTypes.bool.isRequired,\n  },\n));\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ClassNames from 'classnames';\n\nconst Footer = (props) => {\n  const {\n    filterTodo,\n    clearCompletedTodos,\n    filter,\n    countActive,\n  } = props;\n\n  return (\n    <footer className=\"footer\">\n      <span className=\"todo-count\">\n        {`${countActive} items left`}\n      </span>\n\n      <ul className=\"filters\">\n        <li>\n          <a\n            href=\"#/\"\n            onClick={() => (filterTodo('All'))}\n            className={ClassNames({\n              selected: filter === 'All',\n            })}\n          >\n            All\n          </a>\n        </li>\n        <li>\n          <a\n            href=\"#/active\"\n            onClick={() => (filterTodo('Active'))}\n            className={ClassNames({\n              selected: filter === 'Active',\n            })}\n          >\n            Active\n          </a>\n        </li>\n        <li>\n          <a\n            href=\"#/completed\"\n            onClick={() => (filterTodo('Completed'))}\n            className={ClassNames({\n              selected: filter === 'Completed',\n            })}\n          >\n            Completed\n          </a>\n        </li>\n      </ul>\n\n      <button\n        type=\"button\"\n        className=\"clear-completed\"\n        onClick={() => clearCompletedTodos()}\n      >\n        Clear completed\n      </button>\n    </footer>\n  );\n};\n\nFooter.propTypes = {\n  filterTodo: PropTypes.func.isRequired,\n  clearCompletedTodos: PropTypes.func.isRequired,\n  countActive: PropTypes.number.isRequired,\n  filter: PropTypes.string.isRequired,\n};\n\nexport default Footer;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport TodoList from './TodoList';\nimport Footer from './Footer';\nimport { todosPropTypes } from './propTypes';\n\nclass TodoApp extends React.Component {\n  state = {\n    id: 0,\n    title: '',\n    completed: false,\n  };\n\n  changeTitle = event => (\n    this.setState({\n      title: event.target.value,\n    })\n  );\n\n  submitTodo = (event) => {\n    event.preventDefault();\n\n    if (this.state.title.length === 0) {\n      return;\n    }\n\n    this.props.addedTodo(\n      {\n        id: this.state.id,\n        title: this.state.title.trim(),\n        completed: this.state.completed,\n      },\n    );\n\n    this.setState(state => ({\n      title: '',\n      id: state.id + 1,\n    }\n    ));\n\n    this.props.toggleAllTodos();\n  };\n\n  render() {\n    const { title } = this.state;\n    const {\n      todos,\n      changeCompleted,\n      deleteTodo,\n      changeTitle,\n      toggleAllStatus,\n      toggleAllTodos,\n      toggleTodosStatus,\n      filterTodo,\n      countActive,\n      clearCompletedTodos,\n      filter,\n      originTodos,\n    } = this.props;\n\n    return (\n      <section className=\"todoapp\">\n        <header className=\"header\">\n          <h1>todos</h1>\n\n          <form onSubmit={this.submitTodo}>\n            <input\n              value={title}\n              className=\"new-todo\"\n              placeholder=\"What needs to be done?\"\n              onChange={this.changeTitle}\n            />\n          </form>\n        </header>\n\n        {originTodos.length > 0\n        && (\n          <TodoList\n            todos={todos}\n            changeCompleted={changeCompleted}\n            deleteTodo={deleteTodo}\n            changeTitle={changeTitle}\n            toggleTodosStatus={toggleTodosStatus}\n            toggleAllTodos={toggleAllTodos}\n            toggleAllStatus={toggleAllStatus}\n          />\n        )}\n        {originTodos.length > 0\n        && (\n          <Footer\n            filterTodo={filterTodo}\n            countActive={countActive}\n            clearCompletedTodos={clearCompletedTodos}\n            filter={filter}\n          />\n        )}\n      </section>\n    );\n  }\n}\n\nTodoApp.propTypes = {\n  addedTodo: PropTypes.func.isRequired,\n  toggleAllTodos: PropTypes.func.isRequired,\n  todos: todosPropTypes.isRequired,\n  changeCompleted: PropTypes.func.isRequired,\n  deleteTodo: PropTypes.func.isRequired,\n  changeTitle: PropTypes.func.isRequired,\n  toggleAllStatus: PropTypes.func.isRequired,\n  toggleTodosStatus: PropTypes.bool.isRequired,\n  filterTodo: PropTypes.func.isRequired,\n  countActive: PropTypes.number.isRequired,\n  clearCompletedTodos: PropTypes.func.isRequired,\n  filter: PropTypes.string.isRequired,\n  originTodos: todosPropTypes.isRequired,\n};\n\nexport default TodoApp;\n","import React from 'react';\nimport TodoApp from './components/TodoApp';\n\nclass App extends React.Component {\n  state = {\n    todos: [],\n    toggleTodosStatus: false,\n    filter: 'All',\n  };\n\n  componentDidMount() {\n    let storageState = JSON.parse(localStorage.getItem('storage'));\n\n    if (storageState === null) {\n      storageState = [];\n    }\n\n    this.setState({\n      todos: storageState,\n    });\n  }\n\n  componentDidUpdate() {\n    localStorage.setItem('storage', JSON.stringify(this.state.todos));\n  }\n\n  addedTodo = (todo) => {\n    this.setState(state => ({\n      todos: [...state.todos, todo],\n    }));\n  };\n\n  changeCompleted = (id) => {\n    this.setState(state => ({\n      todos: state.todos.map((todo) => {\n        if (todo.id === id) {\n          return {\n            ...todo,\n            completed: !todo.completed,\n          };\n        }\n\n        return todo;\n      }),\n      toggleTodosStatus: false,\n    }));\n  };\n\n  changeTitle = (title, id) => {\n    this.setState(state => (\n      {\n        todos: state.todos.map((todo) => {\n          if (todo.id === id) {\n            return {\n              ...todo,\n              title,\n            };\n          }\n\n          return todo;\n        }),\n        toggleTodosStatus: false,\n      }\n    ));\n  };\n\n  deleteTodo = id => (\n    this.setState(prev => ({\n      todos: prev.todos.filter(todo => todo.id !== id),\n    }))\n  );\n\n  changeToggleAllTodos = () => (\n    this.setState({\n      toggleTodosStatus: true,\n    })\n  );\n\n  toggleAllTodos = () => (\n    this.setState({\n      toggleTodosStatus: false,\n    })\n  );\n\n  toggleAllStatus = () => (\n    this.setState(prev => (\n      {\n        todos: prev.todos.map(todo => (\n          {\n            ...todo,\n            completed: !prev.toggleTodosStatus,\n          })),\n        toggleTodosStatus: !prev.toggleTodosStatus,\n      }\n    ))\n  );\n\n  filterTodo = (filter) => {\n    if (filter === 'All') {\n      this.setState({\n        filter,\n      });\n    } else if (filter === 'Completed') {\n      this.setState({\n        filter,\n      });\n    } else if (filter === 'Active') {\n      this.setState({\n        filter,\n      });\n    }\n  };\n\n  clearCompletedTodos = () => (\n    this.setState(prev => ({\n      todos: prev.todos.filter(todo => todo.completed === false),\n    }))\n  );\n\n  render() {\n    const {\n      todos,\n      filter,\n    } = this.state;\n    let { toggleTodosStatus } = this.state;\n    let filterTodos = [...todos];\n\n    const countActive = filterTodos.filter(todo => (\n      todo.completed === false)).length;\n\n    if (filter === 'Completed') {\n      filterTodos = filterTodos.filter(todo => (todo.completed === true));\n    }\n\n    if (filter === 'Active') {\n      filterTodos = filterTodos.filter(todo => (todo.completed === false));\n    }\n\n    if (countActive === 0 && filterTodos.length > 0 && !toggleTodosStatus) {\n      toggleTodosStatus = true;\n    }\n\n    return (\n      <>\n        <TodoApp\n          todos={filterTodos}\n          toggleTodosStatus={toggleTodosStatus}\n          toggleAllTodos={this.toggleAllTodos}\n          addedTodo={this.addedTodo}\n          changeCompleted={this.changeCompleted}\n          deleteTodo={this.deleteTodo}\n          changeTitle={this.changeTitle}\n          toggleAllStatus={this.toggleAllStatus}\n          filterTodo={this.filterTodo}\n          clearCompletedTodos={this.clearCompletedTodos}\n          countActive={countActive}\n          filter={filter}\n          originTodos={todos}\n        />\n      </>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './base.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}