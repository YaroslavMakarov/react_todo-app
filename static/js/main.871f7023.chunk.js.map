{"version":3,"sources":["components/TodoItem.js","components/propTypes.js","components/TodoList.js","components/Footer.js","components/TodoApp.js","App.js","index.js"],"names":["TodoItem","PropTypes","arrayOf","shape","id","number","isRequired","title","string","completed","bool","state","isEdit","length","props","todos","editTitle","activateTextInput","setState","target","value","submitChangeTitle","event","key","changeTitle","this","changeCompleted","deleteTodo","index","className","ClassNames","editing","type","checked","onChange","htmlFor","onDoubleClick","onClick","onKeyDown","React","Component","TodoList","сalltoggleAllStatus","toggleAllStatus","toggleTodosStatus","map","todo","todosArr","Footer","filteredTodos","filter","filterTodo","clearCompleted","clearCompletedTodos","countActive","href","selected","TodoApp","submitTodo","addedTodo","toggleAllTodos","placeholder","App","splice","prev","filterTodos","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.871f7023.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport ClassNames from 'classnames';\nimport { todosPropTypes } from './propTypes';\n\nclass TodoItem extends React.Component {\n  state = {\n    isEdit: false,\n    length: this.props.todos.length,\n    editTitle: this.props.title,\n  };\n\n  activateTextInput = () => (\n    this.setState({\n      isEdit: true,\n    })\n  );\n\n  editTitle = ({ target }) => (\n    this.setState({\n      editTitle: target.value,\n    })\n  );\n\n  submitChangeTitle = (event, title, id) => {\n    if (event.key === 'Escape') {\n      this.setState({\n        isEdit: false,\n      });\n    } else if (event.key === 'Enter') {\n      this.props.changeTitle(title, id);\n      this.setState({\n        isEdit: false,\n      });\n    }\n  };\n\n  render() {\n    const {\n      id,\n      title,\n      completed,\n      changeCompleted,\n      deleteTodo,\n      index,\n    } = this.props;\n    const { isEdit, editTitle } = this.state;\n\n    return (\n      <>\n        <li className={ClassNames('item', {\n          completed,\n          editing: isEdit,\n        })}\n        >\n          <div className=\"view\">\n            <input\n              type=\"checkbox\"\n              className=\"toggle\"\n              id={id}\n              checked={completed}\n              onChange={() => (changeCompleted(id))}\n            />\n            <label\n              htmlFor={id}\n              onDoubleClick={this.activateTextInput}\n            >\n              {title}\n            </label>\n            <button\n              type=\"button\"\n              className=\"destroy\"\n              onClick={() => deleteTodo(index)}\n            />\n          </div>\n          <input\n            type=\"text\"\n            className=\"edit\"\n            onKeyDown={event => this.submitChangeTitle(event, editTitle, id)}\n            onChange={this.editTitle}\n            value={editTitle}\n          />\n        </li>\n      </>\n    );\n  }\n}\n\nTodoItem.propTypes = {\n  todos: todosPropTypes.isRequired,\n  title: PropTypes.string.isRequired,\n  changeTitle: PropTypes.func.isRequired,\n  id: PropTypes.number.isRequired,\n  completed: PropTypes.bool.isRequired,\n  changeCompleted: PropTypes.func.isRequired,\n  deleteTodo: PropTypes.func.isRequired,\n  index: PropTypes.number.isRequired,\n};\n\nexport default TodoItem;\n","import PropTypes from 'prop-types';\n\nexport const todosPropTypes = PropTypes.arrayOf(PropTypes.shape(\n  {\n    id: PropTypes.number.isRequired,\n    title: PropTypes.string.isRequired,\n    completed: PropTypes.bool.isRequired,\n  },\n));\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport TodoItem from './TodoItem';\nimport { todosPropTypes } from './propTypes';\n\nclass TodoList extends React.Component {\n  сalltoggleAllStatus = () => {\n    this.props.toggleAllStatus();\n  };\n\n  render() {\n    const {\n      todos,\n      changeCompleted,\n      deleteTodo,\n      changeTitle,\n      toggleTodosStatus,\n    } = this.props;\n\n    return (\n      <section className=\"main\">\n        <input\n          type=\"checkbox\"\n          id=\"toggle-all\"\n          className=\"toggle-all\"\n          checked={toggleTodosStatus}\n          onChange={this.сalltoggleAllStatus}\n        />\n        <label htmlFor=\"toggle-all\">Mark all as complete</label>\n\n        <ul className=\"todo-list\">\n          {(todos.length === 0) || todos.map((todo, index, todosArr) => (\n            <TodoItem\n              key={todo.id}\n              title={todo.title}\n              id={todo.id}\n              completed={todo.completed}\n              index={index}\n              todos={todosArr}\n              changeCompleted={changeCompleted}\n              deleteTodo={deleteTodo}\n              changeTitle={changeTitle}\n            />\n          ))}\n        </ul>\n      </section>\n    );\n  }\n}\n\nTodoList.propTypes = {\n  toggleAllStatus: PropTypes.func.isRequired,\n  todos: todosPropTypes.isRequired,\n  changeCompleted: PropTypes.func.isRequired,\n  deleteTodo: PropTypes.func.isRequired,\n  changeTitle: PropTypes.func.isRequired,\n  toggleTodosStatus: PropTypes.bool.isRequired,\n};\n\nexport default TodoList;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ClassNames from 'classnames';\n\nclass Footer extends React.Component {\n\n  filteredTodos = filter => (\n    this.props.filterTodo(filter)\n  );\n\n  clearCompleted = () => (\n    this.props.clearCompletedTodos()\n  );\n\n  render() {\n    return (\n      <footer className=\"footer\">\n        <span className=\"todo-count\">\n          {`${this.props.countActive} items left`}\n        </span>\n\n        <ul className=\"filters\">\n          <li>\n            <a\n              href=\"#/\"\n              onClick={() => (this.filteredTodos('All'))}\n              className={ClassNames({\n                selected: this.props.filter === 'All',\n              })}\n            >\n              All\n            </a>\n          </li>\n          <li>\n            <a\n              href=\"#/active\"\n              onClick={() => (this.filteredTodos('Active'))}\n              className={ClassNames({\n                selected: this.props.filter === 'Active',\n              })}\n            >\n              Active\n            </a>\n          </li>\n          <li>\n            <a\n              href=\"#/completed\"\n              onClick={() => (this.filteredTodos('Completed'))}\n              className={ClassNames({\n                selected: this.props.filter === 'Completed',\n              })}\n            >\n              Completed\n            </a>\n          </li>\n        </ul>\n\n        <button\n          type=\"button\"\n          className=\"clear-completed\"\n          onClick={this.clearCompleted}\n        >\n          Clear completed\n        </button>\n      </footer>\n    );\n  }\n}\n\nFooter.propTypes = {\n  filterTodo: PropTypes.func.isRequired,\n  clearCompletedTodos: PropTypes.func.isRequired,\n  countActive: PropTypes.number.isRequired,\n};\n\nexport default Footer;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport TodoList from './TodoList';\nimport Footer from './Footer';\nimport { todosPropTypes } from './propTypes';\n\nclass TodoApp extends React.Component {\n  state = {\n    id: 0,\n    title: '',\n    completed: false,\n  };\n\n  changeTitle = event => (\n    this.setState({\n      title: event.target.value,\n    })\n  );\n\n  submitTodo = (event) => {\n    if (event.key === 'Enter') {\n      if (this.state.title.length === 0) {\n        return;\n      }\n\n      this.props.addedTodo(\n        {\n          id: this.state.id,\n          title: this.state.title,\n          completed: this.state.completed,\n        },\n      );\n\n      this.setState(state => ({\n        title: '',\n        id: state.id + 1,\n      }\n      ));\n\n      this.props.toggleAllTodos();\n    }\n  };\n\n  render() {\n    const { title } = this.state;\n    const {\n      todos,\n      changeCompleted,\n      deleteTodo,\n      changeTitle,\n      toggleAllStatus,\n      toggleAllTodos,\n      toggleTodosStatus,\n      filterTodo,\n      countActive,\n      clearCompletedTodos,\n      filter,\n    } = this.props;\n\n    return (\n      <section className=\"todoapp\">\n        <header className=\"header\">\n          <h1>todos</h1>\n\n          <input\n            value={title}\n            className=\"new-todo\"\n            placeholder=\"What needs to be done?\"\n            onChange={this.changeTitle}\n            onKeyDown={this.submitTodo}\n          />\n        </header>\n\n        <TodoList\n          todos={todos}\n          changeCompleted={changeCompleted}\n          deleteTodo={deleteTodo}\n          changeTitle={changeTitle}\n          toggleTodosStatus={toggleTodosStatus}\n          toggleAllTodos={toggleAllTodos}\n          toggleAllStatus={toggleAllStatus}\n        />\n        <Footer\n          filterTodo={filterTodo}\n          countActive={countActive}\n          clearCompletedTodos={clearCompletedTodos}\n          filter={filter}\n        />\n      </section>\n    );\n  }\n}\n\nTodoApp.propTypes = {\n  addedTodo: PropTypes.func.isRequired,\n  toggleAllTodos: PropTypes.func.isRequired,\n  todos: todosPropTypes.isRequired,\n  changeCompleted: PropTypes.func.isRequired,\n  deleteTodo: PropTypes.func.isRequired,\n  changeTitle: PropTypes.func.isRequired,\n  toggleAllStatus: PropTypes.func.isRequired,\n  toggleTodosStatus: PropTypes.bool.isRequired,\n  filterTodo: PropTypes.func.isRequired,\n  countActive: PropTypes.number.isRequired,\n  clearCompletedTodos: PropTypes.func.isRequired,\n};\n\nexport default TodoApp;\n","import React from 'react';\nimport TodoApp from './components/TodoApp';\n\nclass App extends React.Component {\n  state = {\n    todos: [],\n    toggleTodosStatus: false,\n    filter: 'All',\n  };\n\n  addedTodo = (todo) => {\n    this.setState(state => ({\n      todos: [...state.todos, todo],\n    }));\n  };\n\n  changeCompleted = (id) => {\n    this.setState(state => ({\n      todos: state.todos.map((todo) => {\n        if (todo.id === id) {\n          return {\n            ...todo,\n            completed: !todo.completed,\n          };\n        }\n\n        return todo;\n      }),\n      toggleTodosStatus: false,\n    }));\n  };\n\n  changeTitle = (title, id) => {\n    this.setState(state => (\n      {\n        todos: state.todos.map((todo) => {\n          if (todo.id === id) {\n            return {\n              ...todo,\n              title,\n            };\n          }\n\n          return todo;\n        }),\n        toggleTodosStatus: !state.toggleTodosStatus,\n      }\n    ));\n  };\n\n  deleteTodo = index => (\n    this.setState((state) => {\n      state.todos.splice(index, 1);\n\n      return {\n        todos: [...state.todos],\n      };\n    })\n  );\n\n  toggleAllTodos = () => (\n    this.setState({\n      toggleTodosStatus: false,\n    })\n  );\n\n  toggleAllStatus = () => (\n    this.setState(prev => (\n      {\n        todos: prev.todos.map(todo => (\n          {\n            ...todo,\n            completed: !prev.toggleTodosStatus,\n          })),\n        toggleTodosStatus: !prev.toggleTodosStatus,\n      }\n    ))\n  );\n\n  filterTodo = (filter) => {\n    if (filter === 'All') {\n      this.setState({\n        filter,\n      });\n    } else if (filter === 'Completed') {\n      this.setState({\n        filter,\n      });\n    } else if (filter === 'Active') {\n      this.setState({\n        filter,\n      });\n    }\n  };\n\n  clearCompletedTodos = () => (\n    this.setState(prev => ({\n      todos: prev.todos.filter(todo => todo.completed === false),\n    }))\n  );\n\n  render() {\n    const {\n      todos,\n      filter,\n    } = this.state;\n    let { toggleTodosStatus } = this.state;\n    let filterTodos = [...todos];\n\n    const countActive = filterTodos.filter(todo => (\n      todo.completed === false)).length;\n\n    if (filter === 'All') {\n      filterTodos = [...todos];\n    }\n\n    if (filter === 'Completed') {\n      filterTodos = filterTodos.filter(todo => (todo.completed === true));\n    }\n\n    if (filter === 'Active') {\n      filterTodos = filterTodos.filter(todo => (todo.completed === false));\n    }\n\n    if (countActive === 0 && filterTodos.length > 0 && !toggleTodosStatus) {\n      toggleTodosStatus = true;\n    }\n\n    return (\n      <>\n        <TodoApp\n          todos={filterTodos}\n          toggleTodosStatus={toggleTodosStatus}\n          toggleAllTodos={this.toggleAllTodos}\n          addedTodo={this.addedTodo}\n          changeCompleted={this.changeCompleted}\n          deleteTodo={this.deleteTodo}\n          changeTitle={this.changeTitle}\n          toggleAllStatus={this.toggleAllStatus}\n          filterTodo={this.filterTodo}\n          clearCompletedTodos={this.clearCompletedTodos}\n          countActive={countActive}\n          filter={filter}\n        />\n      </>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './base.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}